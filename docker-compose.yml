services:
  magic:
    command: mage start ${PROJECT_NAME}
    env_file:
      - .env
    build:
      context: .
      dockerfile: ./application/mage_ai/Dockerfile
    environment:
      USER_CODE_PATH: /home/src/${PROJECT_NAME}
      ENV: ${ENV}
      MINIO_ROOT_USER: ${min_io_admin}
      MINIO_ROOT_PASSWORD: ${min_io_pwd}
      MAGE_BASE_PATH: mage
    ports:
      - 6789:6789
    volumes:
      - ./application/mage_ai/:/home/src
      - ~/.aws:/root/.aws
      - ~/.mage_data:/root/.mage_data
    networks:
      - ndsnet
    restart: on-failure:5

  minio:
    image: minio/minio
    container_name: minio
    env_file:
      - .env
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./storage:/data
      - ./storage/export:/export
    environment:
      MINIO_ROOT_USER: ${min_io_admin}
      MINIO_ROOT_PASSWORD: ${min_io_pwd}
      MINIO_BROWSER_REDIRECT_URL: http://localhost/minio/
    command: server --console-address ":9001" /data
    networks:
      - ndsnet
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 5

  jupyterlab:
    env_file:
      - .env
    build:
      context: .
      dockerfile: ./application/jupyterlab/Dockerfile
    ports:
      - "8888:8888"
    volumes:
      - ./application/jupyterlab/data:/opt/app/data
    environment:
      JUPYTER_ENABLE_LAB: 1
      NB_USER: jovyan
      NB_GID: 1000
      CHOWN_HOME: 'yes'
      CHOWN_HOME_OPTS: '-R'
    networks:
      - ndsnet

  postgres:
    ports:
      - "5432:5432"
    image: postgres:11
    container_name: postgres
    environment:
      POSTGRES_USER: dbt-trino
      POSTGRES_PASSWORD: dbt-trino
    networks:
      - ndsnet

  metastore_db:
    image: postgres:11
    hostname: metastore_db
    environment:
      POSTGRES_USER: hive
      POSTGRES_PASSWORD: hive
      POSTGRES_DB: metastore
    networks:
      - ndsnet

  hive-metastore:
    hostname: hive-metastore
    image: 'starburstdata/hive:3.1.2-e.18'
    ports:
      - '9083:9083' # Metastore Thrift
    environment:
      HIVE_METASTORE_DRIVER: org.postgresql.Driver
      HIVE_METASTORE_JDBC_URL: jdbc:postgresql://metastore_db:5432/metastore
      HIVE_METASTORE_USER: hive
      HIVE_METASTORE_PASSWORD: hive
      HIVE_METASTORE_WAREHOUSE_DIR: s3://hive/
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: ${min_io_admin}
      S3_SECRET_KEY: ${min_io_pwd}
      S3_PATH_STYLE_ACCESS: "true"
      REGION: ""
      GOOGLE_CLOUD_KEY_FILE_PATH: ""
      AZURE_ADL_CLIENT_ID: ""
      AZURE_ADL_CREDENTIAL: ""
      AZURE_ADL_REFRESH_URL: ""
      AZURE_ABFS_STORAGE_ACCOUNT: ""
      AZURE_ABFS_ACCESS_KEY: ""
      AZURE_WASB_STORAGE_ACCOUNT: ""
      AZURE_ABFS_OAUTH: ""
      AZURE_ABFS_OAUTH_TOKEN_PROVIDER: ""
      AZURE_ABFS_OAUTH_CLIENT_ID: ""
      AZURE_ABFS_OAUTH_SECRET: ""
      AZURE_ABFS_OAUTH_ENDPOINT: ""
      AZURE_WASB_ACCESS_KEY: ""
      HIVE_METASTORE_USERS_IN_ADMIN_ROLE: "admin"
    depends_on:
      - metastore_db
    networks:
      - ndsnet

  metabase_db:
    image: postgres:11
    hostname: metabase_db
    environment:
      POSTGRES_USER: ${MB_DB_USER}
      POSTGRES_PASSWORD: ${MB_DB_PASS}
      POSTGRES_DB: ${MB_DB_DBNAME}
    networks:
      - ndsnet

  metabase:
    env_file:
      - .env
    volumes:
      - ./application/metabase:/metabase-data
    environment:
      - MB_DB_TYPE=postgres
      - MB_DB_HOST=metabase_db
      - MB_DB_PORT=5432
      - MB_DB_DBNAME=${MB_DB_DBNAME}
      - MB_DB_USER=${MB_DB_USER}
      - MB_DB_PASS=${MB_DB_PASS}
      - MB_SITE_URL=http://localhost/metabase/
    ports:
      - 3000:3000
    image: metabase/metabase
    restart: always
    depends_on: 
      - metabase_db
    networks:
      - ndsnet

  starrocks-fe:
    image: starrocks/fe-ubuntu:3.2-latest
    env_file:
      - .env
    hostname: starrocks-fe
    container_name: starrocks-fe
    user: root
    command:
      - /bin/bash
      - -c
      - |
        echo "# enable shared data, set storage type, set endpoint" >> /opt/starrocks/fe/conf/fe.conf
        echo "run_mode = shared_data" >> /opt/starrocks/fe/conf/fe.conf
        echo "cloud_native_storage_type = S3" >> /opt/starrocks/fe/conf/fe.conf
        echo "aws_s3_endpoint = ${min_io_url}" >> /opt/starrocks/fe/conf/fe.conf

        echo "# set the path in MinIO" >> /opt/starrocks/fe/conf/fe.conf
        echo "aws_s3_path = starrocks" >> /opt/starrocks/fe/conf/fe.conf

        echo "# credentials for MinIO object read/write" >> /opt/starrocks/fe/conf/fe.conf
        echo "aws_s3_access_key = ${min_io_admin}" >> /opt/starrocks/fe/conf/fe.conf
        echo "aws_s3_secret_key = ${min_io_pwd}" >> /opt/starrocks/fe/conf/fe.conf
        echo "aws_s3_use_instance_profile = false" >> /opt/starrocks/fe/conf/fe.conf
        echo "aws_s3_use_aws_sdk_default_behavior = false" >> /opt/starrocks/fe/conf/fe.conf

        echo "# Set this to false if you do not want default" >> /opt/starrocks/fe/conf/fe.conf
        echo "# storage created in the object storage using" >> /opt/starrocks/fe/conf/fe.conf
        echo "# the details provided above" >> /opt/starrocks/fe/conf/fe.conf
        echo "enable_load_volume_from_conf = true" >> /opt/starrocks/fe/conf/fe.conf

        /opt/starrocks/fe/bin/start_fe.sh
    ports:
      - 8030:8030
      - 9020:9020
      - 9030:9030
    healthcheck:
      test: 'mysql -u root -h starrocks-fe -P 9030 -e "show frontends\G" |grep "Alive: true"'
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      - minio
    networks:
      - ndsnet

  starrocks-cn:
    image: starrocks/cn-ubuntu:3.2-latest
    command:
      - /bin/bash
      - -c
      - |
        sleep 15s;
        mysql --connect-timeout 2 -h starrocks-fe -P9030 -uroot -e "ALTER SYSTEM ADD COMPUTE NODE \"starrocks-cn:9050\";"
        /opt/starrocks/cn/bin/start_cn.sh
    ports:
      - 8040:8040
    hostname: starrocks-cn
    container_name: starrocks-cn
    user: root
    depends_on:
      - starrocks-fe
      - minio
    healthcheck:
      test: 'mysql -u root -h starrocks-fe -P 9030 -e "SHOW COMPUTE NODES\G" |grep "Alive: true"'
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - ndsnet

  cubejs:
    image: cubejs/cube:latest
    ports:
      - 4000:4000
    volumes:
      - ./application/cube/cubejs/conf:/cube/conf
    environment:
      - CUBEJS_CUBESTORE_HOST=cubestore_router
      - CUBEJS_DEV_MODE=true
    networks:
      - ndsnet

  cubestore_router:
    restart: always
    image: cubejs/cubestore:latest
    environment:
      - CUBESTORE_WORKERS=cubestore_worker:10001
      - CUBESTORE_REMOTE_DIR=/cube/data
      - CUBESTORE_META_PORT=9999
      - CUBESTORE_SERVER_NAME=cubestore_router:9999
    volumes:
      - ./application/cube/cubestore:/cube/data
    networks:
      - ndsnet
 
  cubestore_worker:
    restart: always
    image: cubejs/cubestore:latest
    environment:
      - CUBESTORE_WORKERS=cubestore_worker:10001
      - CUBESTORE_SERVER_NAME=cubestore_worker:10001
      - CUBESTORE_WORKER_PORT=10001
      - CUBESTORE_REMOTE_DIR=/cube/data
      - CUBESTORE_META_ADDR=cubestore_router:9999
    volumes:
      - ./application/cube/cubestore:/cube/data
    depends_on:
      - cubestore_router
    networks:
      - ndsnet
 
networks:
  ndsnet:
    driver: bridge