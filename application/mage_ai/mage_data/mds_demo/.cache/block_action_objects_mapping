{"block_file": {"data_exporters/write_to_minio_blob_storage.py:data_exporter:python:write to minio blob storage": {"content": "from deltalake.writer import write_deltalake\n\nif 'data_exporter' not in globals():\n    from mage_ai.data_preparation.decorators import data_exporter\n\n\n@data_exporter\ndef export_data(df, *args, **kwargs):\n    \"\"\"\n    Export data to a Delta Table\n\n    Docs: https://delta-io.github.io/delta-rs/python/usage.html#writing-delta-tables\n    \"\"\"\n    storage_options = {\n        'GOOGLE_SERVICE_ACCOUNT': '',\n        'GOOGLE_SERVICE_ACCOUNT_PATH': '',\n        'GOOGLE_SERVICE_ACCOUNT_KEY': '',\n        'GOOGLE_BUCKET': '',\n    }\n\n    uri = 'gs://[bucket]/[key]'\n\n    write_deltalake(\n        uri,\n        data=df,\n        mode='append',          # append or overwrite\n        overwrite_schema=False, # set True to alter the schema when overwriting\n        partition_by=[],\n        storage_options=storage_options,\n    )\n", "file_path": "data_exporters/write_to_minio_blob_storage.py", "language": "python", "type": "data_exporter", "uuid": "write_to_minio_blob_storage"}, "data_exporters/idyllic_explorer.py:data_exporter:python:idyllic explorer": {"content": "from mage_ai.settings.repo import get_repo_path\nfrom mage_ai.io.config import ConfigFileLoader\nfrom mage_ai.io.s3 import S3\nfrom pandas import DataFrame\nfrom os import path\n\nif 'data_exporter' not in globals():\n    from mage_ai.data_preparation.decorators import data_exporter\n\n\n\n", "file_path": "data_exporters/idyllic_explorer.py", "language": "python", "type": "data_exporter", "uuid": "idyllic_explorer"}, "data_exporters/hopeful_grimoire.yaml:data_exporter:yaml:hopeful grimoire": {"content": "config:\n  aws_access_key_id: null\n  aws_region: us-west-2\n  aws_secret_access_key: null\n  bucket: null\n  mode: append\n  object_key_path: null\ndestination: delta_lake_s3\n", "file_path": "data_exporters/hopeful_grimoire.yaml", "language": "yaml", "type": "data_exporter", "uuid": "hopeful_grimoire"}, "data_exporters/write_to_min_io.py:data_exporter:python:write to min io": {"content": "from mage_ai.settings.repo import get_repo_path\nfrom mage_ai.io.config import ConfigFileLoader\nfrom mage_ai.io.s3 import S3\nfrom pandas import DataFrame\nfrom os import path\n\nif 'data_exporter' not in globals():\n    from mage_ai.data_preparation.decorators import data_exporter\n\n\n@data_exporter\ndef export_data_to_s3(df: DataFrame, **kwargs) -> None:\n    \"\"\"\n    Template for exporting data to a S3 bucket.\n    Specify your configuration settings in 'io_config.yaml'.\n\n    Docs: https://docs.mage.ai/design/data-loading#s3\n    \"\"\"\n    config_path = path.join(get_repo_path(), 'io_config.yaml')\n    config_profile = 'default'\n\n    bucket_name = 'your_bucket_name'\n    object_key = 'your_object_key'\n\n    S3.with_config(ConfigFileLoader(config_path, config_profile)).export(\n        df,\n        bucket_name,\n        object_key,\n    )\n", "file_path": "data_exporters/write_to_min_io.py", "language": "python", "type": "data_exporter", "uuid": "write_to_min_io"}, "data_exporters/export_titanic_clean.py:data_exporter:python:export titanic clean": {"content": "from mage_ai.io.file import FileIO\nfrom pandas import DataFrame\n\nif 'data_exporter' not in globals():\n    from mage_ai.data_preparation.decorators import data_exporter\n\n\n@data_exporter\ndef export_data_to_file(df: DataFrame, **kwargs) -> None:\n    \"\"\"\n    Template for exporting data to filesystem.\n\n    Docs: https://docs.mage.ai/design/data-loading#example-loading-data-from-a-file\n    \"\"\"\n    filepath = 'titanic_clean.csv'\n    FileIO().export(df, filepath)\n", "file_path": "data_exporters/export_titanic_clean.py", "language": "python", "type": "data_exporter", "uuid": "export_titanic_clean"}, "data_exporters/min_io_storage/write_to_minio_blob_storage.py:data_exporter:python:min io storage/write to minio blob storage": {"content": "from deltalake.writer import write_deltalake\nif 'data_exporter' not in globals():\n    from mage_ai.data_preparation.decorators import data_exporter\n\n\n@data_exporter\ndef export_data(df, *args, **kwargs):\n    \"\"\"\n    Export data to a Delta Table\n\n    Docs: https://delta-io.github.io/delta-rs/python/usage.html#writing-delta-tables\n    \"\"\"\n    storage_options = {\n        'GOOGLE_SERVICE_ACCOUNT': '',\n        'GOOGLE_SERVICE_ACCOUNT_PATH': '',\n        'GOOGLE_SERVICE_ACCOUNT_KEY': '',\n        'GOOGLE_BUCKET': '',\n    }\n\n    uri = 'gs://[bucket]/[key]'\n\n    write_deltalake(\n        uri,\n        data=df,\n        mode='append',          # append or overwrite\n        overwrite_schema=False, # set True to alter the schema when overwriting\n        partition_by=[],\n        storage_options=storage_options,\n    )\n", "file_path": "data_exporters/min_io_storage/write_to_minio_blob_storage.py", "language": "python", "type": "data_exporter", "uuid": "min_io_storage/write_to_minio_blob_storage"}, "data_exporters/finance_stock_demo/save_to_minio.py:data_exporter:python:finance stock demo/save to minio": {"content": "import pandas as pd\nimport os\n\nfrom deltalake.writer import write_deltalake\n\nif 'data_exporter' not in globals():\n    from mage_ai.data_preparation.decorators import data_exporter\n\n\n@data_exporter\ndef export_data(df, *args, **kwargs):\n    \"\"\"\n    Export data to a Delta Table\n\n    Docs: https://delta-io.github.io/delta-rs/python/usage.html#writing-delta-tables\n    \"\"\"\n    MINIO_USER = kwargs.get('MINIO_KEY')\n    MINIO_KEY = kwargs.get('MINIO_USER')\n\n    storage_options = {\n        'AWS_ACCESS_KEY_ID': MINIO_USER,\n        'AWS_SECRET_ACCESS_KEY': MINIO_KEY,\n        'AWS_ENDPOINT_URL': 'http://minio:9000',\n        'AWS_REGION': 'us-east-1',\n        'AWS_S3_ALLOW_UNSAFE_RENAME': 'true',\n        'AWS_ALLOW_HTTP': 'true',\n        'AWS_STORAGE_ALLOW_HTTP': 'true'\n    }\n\n    uri = 's3://dwhfilesystem/raw_area/vn_stock_income_statement'\n\n    write_deltalake(\n        uri,\n        df,\n        mode='append',          # append or overwrite\n        overwrite_schema=False, # set True to alter the schema when overwriting\n        partition_by=['date_id'],\n        storage_options=storage_options,\n    )", "file_path": "data_exporters/finance_stock_demo/save_to_minio.py", "language": "python", "type": "data_exporter", "uuid": "finance_stock_demo/save_to_minio"}, "data_loaders/intriguing_astronomer.py:data_loader:python:intriguing astronomer": {"content": "import io\nimport pandas as pd\nimport requests\nif 'data_loader' not in globals():\n    from mage_ai.data_preparation.decorators import data_loader\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\n\n@data_loader\ndef load_data_from_api(*args, **kwargs):\n    \"\"\"\n    Template for loading data from API\n    \"\"\"\n    url = ''\n    response = requests.get(url)\n\n    return pd.read_csv(io.StringIO(response.text), sep=',')\n\n\n@test\ndef test_output(output, *args) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert output is not None, 'The output is undefined'\n", "file_path": "data_loaders/intriguing_astronomer.py", "language": "python", "type": "data_loader", "uuid": "intriguing_astronomer"}, "data_loaders/load_titanic.py:data_loader:python:load titanic": {"content": "import io\nimport pandas as pd\nimport requests\nfrom pandas import DataFrame\n\nif 'data_loader' not in globals():\n    from mage_ai.data_preparation.decorators import data_loader\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\n\n@data_loader\ndef load_data_from_api(**kwargs) -> DataFrame:\n    \"\"\"\n    Template for loading data from API\n    \"\"\"\n    url = 'https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv?raw=True'\n\n    return pd.read_csv(url)\n\n\n@test\ndef test_output(df) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert df is not None, 'The output is undefined'\n", "file_path": "data_loaders/load_titanic.py", "language": "python", "type": "data_loader", "uuid": "load_titanic"}, "data_loaders/enigmatic_rogue.yaml:data_loader:yaml:enigmatic rogue": {"content": "config:\n  api_key: null\n  secret_key: null\nsource: amplitude\ncatalog: {}\n", "file_path": "data_loaders/enigmatic_rogue.yaml", "language": "yaml", "type": "data_loader", "uuid": "enigmatic_rogue"}, "data_loaders/vietnam_stock_finance_data/vndirect_stock_data.py:data_loader:python:vietnam stock finance data/vndirect stock data": {"content": "import io\nimport pandas as pd\n\nfrom pandas import DataFrame\nfrom vnstock import *\nfrom datetime import date\n\ntoday = date.today()\ndate_id = today.strftime(\"%Y%m%d\")\n\ndef unpivot_table(df: DataFrame) -> DataFrame:\n    df = pd.melt(df, id_vars=['symbol', 'Metrics'])\n\n    return df\n\n@data_loader\ndef load_fs_data(**kwargs) -> DataFrame:\n    \"\"\"\n    Template for loading Financial Statement data\n\n    \"\"\"\n    symbol = ['MWG', 'SSI', 'VNM', 'FPT', 'CEO', 'HAG']\n    report_type = 'IncomeStatement'\n    frequency = 'Yearly'\n\n    df = pd.DataFrame()\n\n    for i in symbol:\n        try:\n            r = financial_report (symbol=i, report_type=report_type, frequency=frequency)\n            r['symbol'] = i\n            df = pd.concat([df, r], sort=False)\n        except:\n            pass\n\n    df = df.rename(columns={\"CH\u1ec8 TI\u00caU\": \"Metrics\"})\n    df = unpivot_table(df)\n    df['date_id'] = date_id\n\n    return df\n\n@test\ndef test_output(df) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert df is not None, 'The output is undefined'\n", "file_path": "data_loaders/vietnam_stock_finance_data/vndirect_stock_data.py", "language": "python", "type": "data_loader", "uuid": "vietnam_stock_finance_data/vndirect_stock_data"}, "transformers/jeweled_thunder.py:transformer:python:jeweled thunder": {"content": "if 'transformer' not in globals():\n    from mage_ai.data_preparation.decorators import transformer\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\n\n@transformer\ndef transform(data, *args, **kwargs):\n    \"\"\"\n    Template code for a transformer block.\n\n    Add more parameters to this function if this block has multiple parent blocks.\n    There should be one parameter for each output variable from each parent block.\n\n    Args:\n        data: The output from the upstream parent block\n        args: The output from any additional upstream blocks (if applicable)\n\n    Returns:\n        Anything (e.g. data frame, dictionary, array, int, str, etc.)\n    \"\"\"\n    # Specify your transformation logic here\n\n    return data\n\n\n@test\ndef test_output(output, *args) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert output is not None, 'The output is undefined'\n", "file_path": "transformers/jeweled_thunder.py", "language": "python", "type": "transformer", "uuid": "jeweled_thunder"}, "transformers/fill_in_missing_values.py:transformer:python:fill in missing values": {"content": "from pandas import DataFrame\nimport math\n\nif 'transformer' not in globals():\n    from mage_ai.data_preparation.decorators import transformer\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\ndef select_number_columns(df: DataFrame) -> DataFrame:\n    return df[['Age', 'Fare', 'Parch', 'Pclass', 'SibSp', 'Survived']]\n\n\ndef fill_missing_values_with_median(df: DataFrame) -> DataFrame:\n    for col in df.columns:\n        values = sorted(df[col].dropna().tolist())\n        median_age = values[math.floor(len(values) / 2)]\n        df[[col]] = df[[col]].fillna(median_age)\n    return df\n\n\n@transformer\ndef transform_df(df: DataFrame, *args, **kwargs) -> DataFrame:\n    \"\"\"\n    Template code for a transformer block.\n\n    Add more parameters to this function if this block has multiple parent blocks.\n    There should be one parameter for each output variable from each parent block.\n\n    Args:\n        df (DataFrame): Data frame from parent block.\n\n    Returns:\n        DataFrame: Transformed data frame\n    \"\"\"\n    # Specify your transformation logic here\n\n    return fill_missing_values_with_median(select_number_columns(df))\n\n\n@test\ndef test_output(df) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert df is not None, 'The output is undefined'\n", "file_path": "transformers/fill_in_missing_values.py", "language": "python", "type": "transformer", "uuid": "fill_in_missing_values"}, "transformers/resplendent_dew.py:transformer:python:resplendent dew": {"content": "from mage_ai.data_cleaner.transformer_actions.base import BaseAction\nfrom mage_ai.data_cleaner.transformer_actions.constants import ActionType, Axis\nfrom mage_ai.data_cleaner.transformer_actions.utils import build_transformer_action\nfrom pandas import DataFrame\n\nif 'transformer' not in globals():\n    from mage_ai.data_preparation.decorators import transformer\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\n\n@transformer\ndef execute_transformer_action(df: DataFrame, *args, **kwargs) -> DataFrame:\n    \"\"\"\n    Execute Transformer Action: ActionType.DROP_DUPLICATE\n\n    Docs: https://docs.mage.ai/guides/transformer-blocks#drop-duplicates\n    \"\"\"\n    action = build_transformer_action(\n        df,\n        action_type=ActionType.DROP_DUPLICATE,\n        arguments=df.columns,  # Specify column names to use when comparing duplicates\n        axis=Axis.ROW,\n        options={'keep': 'first'},  # Specify whether to keep 'first' or 'last' duplicate\n    )\n\n    return BaseAction(action).execute(df)\n\n\n@test\ndef test_output(output, *args) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert output is not None, 'The output is undefined'\n", "file_path": "transformers/resplendent_dew.py", "language": "python", "type": "transformer", "uuid": "resplendent_dew"}, "transformers/unpivot_table.py:transformer:python:unpivot table": {"content": "import pandas as pd\nfrom pandas import DataFrame\n\nif 'transformer' not in globals():\n    from mage_ai.data_preparation.decorators import transformer\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\n\n@transformer\ndef execute_transformer_action(df: DataFrame, *args, **kwargs) -> DataFrame:\n    \"\"\"\n    Template code for a transformer block.\n\n    Add more parameters to this function if this block has multiple parent blocks.\n    There should be one parameter for each output variable from each parent block.\n\n    Args:\n        df (DataFrame): Data frame from parent block.\n\n    Returns:\n        DataFrame: Transformed data frame\n    \"\"\"\n\n    return df\n\n\n@test\ndef test_output(output, *args) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert output is not None, 'The output is undefined'\n", "file_path": "transformers/unpivot_table.py", "language": "python", "type": "transformer", "uuid": "unpivot_table"}, "/home/src/mds_demo/data_exporters/finance_stock_demo/save_to_minio.py:data_exporter:python:home/src/mds demo/data exporters/finance stock demo/save to minio": {"content": "import pandas as pd\nimport os\n\nfrom deltalake.writer import write_deltalake\nfrom mage_ai.io.config import ConfigKey, EnvironmentVariableLoader\nfrom datetime import datetime\nfrom zoneinfo import ZoneInfo\n\nif 'data_exporter' not in globals():\n    from mage_ai.data_preparation.decorators import data_exporter\n\n\n@data_exporter\ndef export_data(df, *args, **kwargs):\n    \"\"\"\n    Export data to a Delta Table\n\n    Docs: https://delta-io.github.io/delta-rs/python/usage.html#writing-delta-tables\n    \"\"\"\n    config = EnvironmentVariableLoader()\n    MINIO_USER = config.get('min_io_admin')\n    MINIO_KEY = config.get('min_io_pwd')\n    \n    storage_options = {\n        'AWS_ACCESS_KEY_ID': MINIO_USER,\n        'AWS_SECRET_ACCESS_KEY': MINIO_KEY,\n        'AWS_ENDPOINT_URL': 'http://minio:9000',\n        'AWS_REGION': 'us-east-1',\n        'AWS_S3_ALLOW_UNSAFE_RENAME': 'true',\n        'AWS_ALLOW_HTTP': 'true',\n        'AWS_STORAGE_ALLOW_HTTP': 'true'\n    }\n\n    today = datetime.now(ZoneInfo(\"Asia/Ho_Chi_Minh\"))\n    year_month_id = today.strftime(\"%Y%m\")\n    date_id = today.strftime(\"%Y%m%d\")\n    timestamp_id = today.strftime(\"%H%M%S\")\n\n    # Add partition column to DataFrame\n    df['year_month_id'] = year_month_id\n    df['date_id'] = date_id\n    df['timestamp_id'] = timestamp_id\n\n    uri = kwargs.get('delta_folder_path')\n\n    write_deltalake(\n        uri,\n        df,\n        mode='overwrite',          # append or overwrite\n        overwrite_schema=False, # set True to alter the schema when overwriting\n        partition_by=['year_month_id', 'date_id', 'timestamp_id'],\n        storage_options=storage_options,\n    )", "file_path": "/home/src/mds_demo/data_exporters/finance_stock_demo/save_to_minio.py", "language": "python", "type": "data_exporter", "uuid": "finance_stock_demo/save_to_minio"}, "/home/src/mds_demo/data_loaders/vietnam_stock_finance_data/vndirect_stock_data.py:data_loader:python:home/src/mds demo/data loaders/vietnam stock finance data/vndirect stock data": {"content": "import io\nimport pandas as pd\n\nfrom pandas import DataFrame\nfrom vnstock import *\n\ndef unpivot_table(df: DataFrame) -> DataFrame:\n    df = pd.melt(df, id_vars=['symbol', 'Metrics'])\n\n    return df\n\n@data_loader\ndef load_fs_data(**kwargs) -> DataFrame:\n    \"\"\"\n    Template for loading Financial Statement data\n\n    \"\"\"\n    symbol = ['MWG', 'SSI', 'VNM', 'FPT', 'CEO', 'HAG']\n    report_type = 'BalanceSheet'\n    frequency = 'Yearly'\n\n    df = pd.DataFrame()\n\n    for i in symbol:\n        try:\n            r = financial_report (symbol=i, report_type=report_type, frequency=frequency)\n            r['symbol'] = i\n            df = pd.concat([df, r], sort=False)\n        except:\n            pass\n\n    df = df.rename(columns={\"CH\u1ec8 TI\u00caU\": \"Metrics\"})\n    df = unpivot_table(df)\n\n    return df\n\n@test\ndef test_output(df) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert df is not None, 'The output is undefined'\n", "file_path": "/home/src/mds_demo/data_loaders/vietnam_stock_finance_data/vndirect_stock_data.py", "language": "python", "type": "data_loader", "uuid": "vietnam_stock_finance_data/vndirect_stock_data"}, "/home/src/mds_demo/data_loaders/vndirect_balance_sheet_data.py:data_loader:python:home/src/mds demo/data loaders/vndirect balance sheet data": {"content": "if 'data_loader' not in globals():\n    from mage_ai.data_preparation.decorators import data_loader\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\n\n@data_loader\ndef load_data(*args, **kwargs):\n    \"\"\"\n    Template code for loading data from any source.\n\n    Returns:\n        Anything (e.g. data frame, dictionary, array, int, str, etc.)\n    \"\"\"\n    # Specify your data loading logic here\n\n    return {}\n\n\n@test\ndef test_output(output, *args) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert output is not None, 'The output is undefined'\n", "file_path": "/home/src/mds_demo/data_loaders/vndirect_balance_sheet_data.py", "language": "python", "type": "data_loader", "uuid": "vndirect_balance_sheet_data"}}, "custom_block_template": {"custom_templates/blocks/write_to_s3_blob_storage:data_exporter:python": {"block_type": "data_exporter", "color": null, "configuration": null, "description": null, "language": "python", "name": null, "pipeline": {}, "tags": [], "user": {}, "template_uuid": "write_to_s3_blob_storage", "uuid": "custom_templates/blocks/write_to_s3_blob_storage", "content": "import pandas as pd\nimport os\n\nfrom deltalake.writer import write_deltalake\nfrom mage_ai.io.config import ConfigKey, EnvironmentVariableLoader\nfrom datetime import datetime\nfrom zoneinfo import ZoneInfo\n\nif 'data_exporter' not in globals():\n    from mage_ai.data_preparation.decorators import data_exporter\n\n\n@data_exporter\ndef export_data(df, *args, **kwargs):\n    \"\"\"\n    Export data to a Delta Table\n\n    Docs: https://delta-io.github.io/delta-rs/python/usage.html#writing-delta-tables\n    \"\"\"\n    config = EnvironmentVariableLoader()\n    MINIO_USER = config.get('min_io_admin')\n    MINIO_KEY = config.get('min_io_pwd')\n    \n    storage_options = {\n        'AWS_ACCESS_KEY_ID': MINIO_USER,\n        'AWS_SECRET_ACCESS_KEY': MINIO_KEY,\n        'AWS_ENDPOINT_URL': 'http://minio:9000',\n        'AWS_REGION': 'us-east-1',\n        'AWS_S3_ALLOW_UNSAFE_RENAME': 'true',\n        'AWS_ALLOW_HTTP': 'true',\n        'AWS_STORAGE_ALLOW_HTTP': 'true'\n    }\n\n    today = datetime.now(ZoneInfo(\"Asia/Ho_Chi_Minh\"))\n    year_month_id = today.strftime(\"%Y%m\")\n    date_id = today.strftime(\"%Y%m%d\")\n    timestamp_id = today.strftime(\"%H%M%S\")\n\n    # Add partition column to DataFrame\n    df['year_month_id'] = year_month_id\n    df['date_id'] = date_id\n    df['timestamp_id'] = timestamp_id\n\n    uri = kwargs.get('delta_folder_path')\n\n    write_deltalake(\n        uri,\n        df,\n        mode='overwrite',          # append or overwrite\n        overwrite_schema=False, # set True to alter the schema when overwriting\n        partition_by=['year_month_id', 'date_id', 'timestamp_id'],\n        storage_options=storage_options,\n    )"}}, "mage_template": {"data_loaders/deltalake/s3.py:data_loader:python:Amazon S3:Load a Delta Table from Amazon S3.:Delta Lake": {"block_type": "data_loader", "description": "Load a Delta Table from Amazon S3.", "groups": ["Delta Lake"], "language": "python", "name": "Amazon S3", "path": "data_loaders/deltalake/s3.py"}, "data_loaders/deltalake/azure_blob_storage.py:data_loader:python:Azure Blob Storage:Load a Delta Table from Azure Blob Storage.:Delta Lake": {"block_type": "data_loader", "description": "Load a Delta Table from Azure Blob Storage.", "groups": ["Delta Lake"], "language": "python", "name": "Azure Blob Storage", "path": "data_loaders/deltalake/azure_blob_storage.py"}, "data_loaders/deltalake/gcs.py:data_loader:python:Google Cloud Storage:Load a Delta Table from Google Cloud Storage.:Delta Lake": {"block_type": "data_loader", "description": "Load a Delta Table from Google Cloud Storage.", "groups": ["Delta Lake"], "language": "python", "name": "Google Cloud Storage", "path": "data_loaders/deltalake/gcs.py"}, "data_loaders/mongodb.py:data_loader:python:MongoDB:Load data from MongoDB.:Databases (NoSQL)": {"block_type": "data_loader", "description": "Load data from MongoDB.", "groups": ["Databases (NoSQL)"], "language": "python", "name": "MongoDB", "path": "data_loaders/mongodb.py"}, "data_loaders/mssql.py:data_loader:python:MSSQL:Load data from MSSQL.:Databases": {"block_type": "data_loader", "description": "Load data from MSSQL.", "groups": ["Databases"], "language": "python", "name": "MSSQL", "path": "data_loaders/mssql.py"}, "data_exporters/deltalake/s3.py:data_exporter:python:Amazon S3:Export data to a Delta Table in Amazon S3.:Delta Lake": {"block_type": "data_exporter", "description": "Export data to a Delta Table in Amazon S3.", "groups": ["Delta Lake"], "language": "python", "name": "Amazon S3", "path": "data_exporters/deltalake/s3.py"}, "data_exporters/deltalake/azure_blob_storage.py:data_exporter:python:Azure Blob Storage:Export data to a Delta Table in Azure Blob Storage.:Delta Lake": {"block_type": "data_exporter", "description": "Export data to a Delta Table in Azure Blob Storage.", "groups": ["Delta Lake"], "language": "python", "name": "Azure Blob Storage", "path": "data_exporters/deltalake/azure_blob_storage.py"}, "data_exporters/deltalake/gcs.py:data_exporter:python:Google Cloud Storage:Export data to a Delta Table in Google Cloud Storage.:Delta Lake": {"block_type": "data_exporter", "description": "Export data to a Delta Table in Google Cloud Storage.", "groups": ["Delta Lake"], "language": "python", "name": "Google Cloud Storage", "path": "data_exporters/deltalake/gcs.py"}, "data_exporters/mongodb.py:data_exporter:python:MongoDB:Export data to MongoDB.": {"block_type": "data_exporter", "description": "Export data to MongoDB.", "language": "python", "name": "MongoDB", "path": "data_exporters/mongodb.py"}, "data_exporters/mssql.py:data_exporter:python:MSSQL:Export data to MSSQL.:Databases": {"block_type": "data_exporter", "description": "Export data to MSSQL.", "groups": ["Databases"], "language": "python", "name": "MSSQL", "path": "data_exporters/mssql.py"}, "data_loaders/orchestration/triggers/default.jinja:data_loader:python:Trigger pipeline:Trigger another pipeline to run.:Orchestration": {"block_type": "data_loader", "description": "Trigger another pipeline to run.", "groups": ["Orchestration"], "language": "python", "name": "Trigger pipeline", "path": "data_loaders/orchestration/triggers/default.jinja"}, "data_exporters/orchestration/triggers/default.jinja:data_exporter:python:Trigger pipeline:Trigger another pipeline to run.:Orchestration": {"block_type": "data_exporter", "description": "Trigger another pipeline to run.", "groups": ["Orchestration"], "language": "python", "name": "Trigger pipeline", "path": "data_exporters/orchestration/triggers/default.jinja"}, "callbacks/base.jinja:callback:python:Base template:Base template with empty functions.": {"block_type": "callback", "description": "Base template with empty functions.", "language": "python", "name": "Base template", "path": "callbacks/base.jinja"}, "callbacks/orchestration/triggers/default.jinja:callback:python:Trigger pipeline:Trigger another pipeline to run.:Orchestration": {"block_type": "callback", "description": "Trigger another pipeline to run.", "groups": ["Orchestration"], "language": "python", "name": "Trigger pipeline", "path": "callbacks/orchestration/triggers/default.jinja"}, "conditionals/base.jinja:conditional:python:Base template:Base template with empty functions.": {"block_type": "conditional", "description": "Base template with empty functions.", "language": "python", "name": "Base template", "path": "conditionals/base.jinja"}, "data_loaders/default.jinja:data_loader:python:Base template (generic)": {"block_type": "data_loader", "language": "python", "name": "Base template (generic)", "path": "data_loaders/default.jinja"}, "data_loaders/s3.py:data_loader:python:Amazon S3:Data lakes": {"block_type": "data_loader", "groups": ["Data lakes"], "language": "python", "name": "Amazon S3", "path": "data_loaders/s3.py"}, "data_loaders/azure_blob_storage.py:data_loader:python:Azure Blob Storage:Data lakes": {"block_type": "data_loader", "groups": ["Data lakes"], "language": "python", "name": "Azure Blob Storage", "path": "data_loaders/azure_blob_storage.py"}, "data_loaders/google_cloud_storage.py:data_loader:python:Google Cloud Storage:Data lakes": {"block_type": "data_loader", "groups": ["Data lakes"], "language": "python", "name": "Google Cloud Storage", "path": "data_loaders/google_cloud_storage.py"}, "data_loaders/redshift.py:data_loader:python:Amazon Redshift:Data warehouses": {"block_type": "data_loader", "groups": ["Data warehouses"], "language": "python", "name": "Amazon Redshift", "path": "data_loaders/redshift.py"}, "data_loaders/bigquery.py:data_loader:python:Google BigQuery:Load data from Google BigQuery.:Data warehouses": {"block_type": "data_loader", "description": "Load data from Google BigQuery.", "groups": ["Data warehouses"], "language": "python", "name": "Google BigQuery", "path": "data_loaders/bigquery.py"}, "data_loaders/snowflake.py:data_loader:python:Snowflake:Data warehouses": {"block_type": "data_loader", "groups": ["Data warehouses"], "language": "python", "name": "Snowflake", "path": "data_loaders/snowflake.py"}, "data_loaders/duckdb.py:data_loader:python:DuckDB:Databases": {"block_type": "data_loader", "groups": ["Databases"], "language": "python", "name": "DuckDB", "path": "data_loaders/duckdb.py"}, "data_loaders/mysql.py:data_loader:python:MySQL:Databases": {"block_type": "data_loader", "groups": ["Databases"], "language": "python", "name": "MySQL", "path": "data_loaders/mysql.py"}, "data_loaders/oracledb.py:data_loader:python:Oracle DB:Databases": {"block_type": "data_loader", "groups": ["Databases"], "language": "python", "name": "Oracle DB", "path": "data_loaders/oracledb.py"}, "data_loaders/postgres.py:data_loader:python:PostgreSQL:Databases": {"block_type": "data_loader", "groups": ["Databases"], "language": "python", "name": "PostgreSQL", "path": "data_loaders/postgres.py"}, "data_loaders/api.py:data_loader:python:API:Fetch data from an API request.": {"block_type": "data_loader", "description": "Fetch data from an API request.", "language": "python", "name": "API", "path": "data_loaders/api.py"}, "data_loaders/file.py:data_loader:python:Local file:Load data from a file on your machine.": {"block_type": "data_loader", "description": "Load data from a file on your machine.", "language": "python", "name": "Local file", "path": "data_loaders/file.py"}, "data_loaders/google_sheets.py:data_loader:python:Google Sheets:Load data from a worksheet in Google Sheets.": {"block_type": "data_loader", "description": "Load data from a worksheet in Google Sheets.", "language": "python", "name": "Google Sheets", "path": "data_loaders/google_sheets.py"}, "data_loaders/druid.py:data_loader:python:Druid": {"block_type": "data_loader", "language": "python", "name": "Druid", "path": "data_loaders/druid.py"}, "transformers/default.jinja:transformer:python:Base template (generic)": {"block_type": "transformer", "language": "python", "name": "Base template (generic)", "path": "transformers/default.jinja"}, "transformers/data_warehouse_transformer.jinja:transformer:python:Amazon Redshift:Data warehouses": {"block_type": "transformer", "groups": ["Data warehouses"], "language": "python", "name": "Amazon Redshift", "path": "transformers/data_warehouse_transformer.jinja", "template_variables": {"additional_args": "\n        loader.commit() # Permanently apply database changes", "data_source": "redshift", "data_source_handler": "Redshift"}}, "transformers/data_warehouse_transformer.jinja:transformer:python:Google BigQuery:Data warehouses": {"block_type": "transformer", "groups": ["Data warehouses"], "language": "python", "name": "Google BigQuery", "path": "transformers/data_warehouse_transformer.jinja", "template_variables": {"additional_args": "", "data_source": "bigquery", "data_source_handler": "BigQuery"}}, "transformers/data_warehouse_transformer.jinja:transformer:python:Snowflake:Data warehouses": {"block_type": "transformer", "groups": ["Data warehouses"], "language": "python", "name": "Snowflake", "path": "transformers/data_warehouse_transformer.jinja", "template_variables": {"additional_args": "\n        loader.commit() # Permanently apply database changes", "data_source": "snowflake", "data_source_handler": "Snowflake"}}, "transformers/data_warehouse_transformer.jinja:transformer:python:PostgreSQL:Databases": {"block_type": "transformer", "groups": ["Databases"], "language": "python", "name": "PostgreSQL", "path": "transformers/data_warehouse_transformer.jinja", "template_variables": {"additional_args": "\n        loader.commit() # Permanently apply database changes", "data_source": "postgres", "data_source_handler": "Postgres"}}, "transformers/transformer_actions/row/drop_duplicate.py:transformer:python:Drop duplicate rows:Row actions": {"block_type": "transformer", "groups": ["Row actions"], "language": "python", "name": "Drop duplicate rows", "path": "transformers/transformer_actions/row/drop_duplicate.py"}, "transformers/transformer_actions/row/filter.py:transformer:python:Filter rows:Row actions": {"block_type": "transformer", "groups": ["Row actions"], "language": "python", "name": "Filter rows", "path": "transformers/transformer_actions/row/filter.py"}, "transformers/transformer_actions/row/remove.py:transformer:python:Remove rows:Row actions": {"block_type": "transformer", "groups": ["Row actions"], "language": "python", "name": "Remove rows", "path": "transformers/transformer_actions/row/remove.py"}, "transformers/transformer_actions/row/sort.py:transformer:python:Sort rows:Row actions": {"block_type": "transformer", "groups": ["Row actions"], "language": "python", "name": "Sort rows", "path": "transformers/transformer_actions/row/sort.py"}, "transformers/transformer_actions/column/average.py:transformer:python:Average value of column:Column actions:Aggregate": {"block_type": "transformer", "groups": ["Column actions", "Aggregate"], "language": "python", "name": "Average value of column", "path": "transformers/transformer_actions/column/average.py"}, "transformers/transformer_actions/column/count_distinct.py:transformer:python:Count unique values in column:Column actions:Aggregate": {"block_type": "transformer", "groups": ["Column actions", "Aggregate"], "language": "python", "name": "Count unique values in column", "path": "transformers/transformer_actions/column/count_distinct.py"}, "transformers/transformer_actions/column/first.py:transformer:python:First value in column:Column actions:Aggregate": {"block_type": "transformer", "groups": ["Column actions", "Aggregate"], "language": "python", "name": "First value in column", "path": "transformers/transformer_actions/column/first.py"}, "transformers/transformer_actions/column/last.py:transformer:python:Last value in column:Column actions:Aggregate": {"block_type": "transformer", "groups": ["Column actions", "Aggregate"], "language": "python", "name": "Last value in column", "path": "transformers/transformer_actions/column/last.py"}, "transformers/transformer_actions/column/max.py:transformer:python:Maximum value in column:Column actions:Aggregate": {"block_type": "transformer", "groups": ["Column actions", "Aggregate"], "language": "python", "name": "Maximum value in column", "path": "transformers/transformer_actions/column/max.py"}, "transformers/transformer_actions/column/median.py:transformer:python:Median value in column:Column actions:Aggregate": {"block_type": "transformer", "groups": ["Column actions", "Aggregate"], "language": "python", "name": "Median value in column", "path": "transformers/transformer_actions/column/median.py"}, "transformers/transformer_actions/column/min.py:transformer:python:Min value in column:Column actions:Aggregate": {"block_type": "transformer", "groups": ["Column actions", "Aggregate"], "language": "python", "name": "Min value in column", "path": "transformers/transformer_actions/column/min.py"}, "transformers/transformer_actions/column/sum.py:transformer:python:Sum of all values in column:Column actions:Aggregate": {"block_type": "transformer", "groups": ["Column actions", "Aggregate"], "language": "python", "name": "Sum of all values in column", "path": "transformers/transformer_actions/column/sum.py"}, "transformers/transformer_actions/column/count.py:transformer:python:Total count of values in column:Column actions:Aggregate": {"block_type": "transformer", "groups": ["Column actions", "Aggregate"], "language": "python", "name": "Total count of values in column", "path": "transformers/transformer_actions/column/count.py"}, "transformers/transformer_actions/column/clean_column_name.py:transformer:python:Clean column name:Column actions:Formatting": {"block_type": "transformer", "groups": ["Column actions", "Formatting"], "language": "python", "name": "Clean column name", "path": "transformers/transformer_actions/column/clean_column_name.py"}, "transformers/transformer_actions/column/fix_syntax_errors.py:transformer:python:Fix syntax errors:Column actions:Formatting": {"block_type": "transformer", "groups": ["Column actions", "Formatting"], "language": "python", "name": "Fix syntax errors", "path": "transformers/transformer_actions/column/fix_syntax_errors.py"}, "transformers/transformer_actions/column/reformat.py:transformer:python:Reformat values in column:Column actions:Formatting": {"block_type": "transformer", "groups": ["Column actions", "Formatting"], "language": "python", "name": "Reformat values in column", "path": "transformers/transformer_actions/column/reformat.py"}, "transformers/transformer_actions/column/select.py:transformer:python:Keep column(s):Column actions:Column removal": {"block_type": "transformer", "groups": ["Column actions", "Column removal"], "language": "python", "name": "Keep column(s)", "path": "transformers/transformer_actions/column/select.py"}, "transformers/transformer_actions/column/remove.py:transformer:python:Remove column(s):Column actions:Column removal": {"block_type": "transformer", "groups": ["Column actions", "Column removal"], "language": "python", "name": "Remove column(s)", "path": "transformers/transformer_actions/column/remove.py"}, "transformers/transformer_actions/column/shift_down.py:transformer:python:Shift row values down:Column actions:Shift": {"block_type": "transformer", "groups": ["Column actions", "Shift"], "language": "python", "name": "Shift row values down", "path": "transformers/transformer_actions/column/shift_down.py"}, "transformers/transformer_actions/column/shift_up.py:transformer:python:Shift row values up:Column actions:Shift": {"block_type": "transformer", "groups": ["Column actions", "Shift"], "language": "python", "name": "Shift row values up", "path": "transformers/transformer_actions/column/shift_up.py"}, "transformers/transformer_actions/column/normalize.py:transformer:python:Normalize data:Column actions:Feature scaling": {"block_type": "transformer", "groups": ["Column actions", "Feature scaling"], "language": "python", "name": "Normalize data", "path": "transformers/transformer_actions/column/normalize.py"}, "transformers/transformer_actions/column/standardize.py:transformer:python:Standardize data:Column actions:Feature scaling": {"block_type": "transformer", "groups": ["Column actions", "Feature scaling"], "language": "python", "name": "Standardize data", "path": "transformers/transformer_actions/column/standardize.py"}, "transformers/transformer_actions/column/impute.py:transformer:python:Fill in missing values:Column actions:Data cleaning": {"block_type": "transformer", "groups": ["Column actions", "Data cleaning"], "language": "python", "name": "Fill in missing values", "path": "transformers/transformer_actions/column/impute.py"}, "transformers/transformer_actions/column/remove_outliers.py:transformer:python:Remove outliers:Column actions:Data cleaning": {"block_type": "transformer", "groups": ["Column actions", "Data cleaning"], "language": "python", "name": "Remove outliers", "path": "transformers/transformer_actions/column/remove_outliers.py"}, "transformers/transformer_actions/column/diff.py:transformer:python:Calculate difference between values:Column actions:Feature extraction": {"block_type": "transformer", "groups": ["Column actions", "Feature extraction"], "language": "python", "name": "Calculate difference between values", "path": "transformers/transformer_actions/column/diff.py"}, "data_exporters/default.jinja:data_exporter:python:Base template (generic)": {"block_type": "data_exporter", "language": "python", "name": "Base template (generic)", "path": "data_exporters/default.jinja"}, "data_exporters/file.py:data_exporter:python:Local file": {"block_type": "data_exporter", "language": "python", "name": "Local file", "path": "data_exporters/file.py"}, "data_exporters/google_sheets.py:data_exporter:python:Google Sheets": {"block_type": "data_exporter", "language": "python", "name": "Google Sheets", "path": "data_exporters/google_sheets.py"}, "data_exporters/s3.py:data_exporter:python:Amazon S3:Data lakes": {"block_type": "data_exporter", "groups": ["Data lakes"], "language": "python", "name": "Amazon S3", "path": "data_exporters/s3.py"}, "data_exporters/azure_blob_storage.py:data_exporter:python:Azure Blob Storage:Data lakes": {"block_type": "data_exporter", "groups": ["Data lakes"], "language": "python", "name": "Azure Blob Storage", "path": "data_exporters/azure_blob_storage.py"}, "data_exporters/google_cloud_storage.py:data_exporter:python:Google Cloud Storage:Data lakes": {"block_type": "data_exporter", "groups": ["Data lakes"], "language": "python", "name": "Google Cloud Storage", "path": "data_exporters/google_cloud_storage.py"}, "data_exporters/redshift.py:data_exporter:python:Amazon Redshift:Data warehouses": {"block_type": "data_exporter", "groups": ["Data warehouses"], "language": "python", "name": "Amazon Redshift", "path": "data_exporters/redshift.py"}, "data_exporters/bigquery.py:data_exporter:python:Google BigQuery:Data warehouses": {"block_type": "data_exporter", "groups": ["Data warehouses"], "language": "python", "name": "Google BigQuery", "path": "data_exporters/bigquery.py"}, "data_exporters/snowflake.py:data_exporter:python:Snowflake:Data warehouses": {"block_type": "data_exporter", "groups": ["Data warehouses"], "language": "python", "name": "Snowflake", "path": "data_exporters/snowflake.py"}, "data_exporters/duckdb.py:data_exporter:python:DuckDB:Databases": {"block_type": "data_exporter", "groups": ["Databases"], "language": "python", "name": "DuckDB", "path": "data_exporters/duckdb.py"}, "data_exporters/mysql.py:data_exporter:python:MySQL:Databases": {"block_type": "data_exporter", "groups": ["Databases"], "language": "python", "name": "MySQL", "path": "data_exporters/mysql.py"}, "data_exporters/postgres.py:data_exporter:python:PostgreSQL:Databases": {"block_type": "data_exporter", "groups": ["Databases"], "language": "python", "name": "PostgreSQL", "path": "data_exporters/postgres.py"}, "sensors/default.py:sensor:python:Base template (generic)": {"block_type": "sensor", "language": "python", "name": "Base template (generic)", "path": "sensors/default.py"}, "sensors/s3.py:sensor:python:Amazon S3:Data lakes": {"block_type": "sensor", "groups": ["Data lakes"], "language": "python", "name": "Amazon S3", "path": "sensors/s3.py"}, "sensors/google_cloud_storage.py:sensor:python:Google Cloud Storage:Data lakes": {"block_type": "sensor", "groups": ["Data lakes"], "language": "python", "name": "Google Cloud Storage", "path": "sensors/google_cloud_storage.py"}, "sensors/redshift.py:sensor:python:Amazon Redshift:Data warehouses": {"block_type": "sensor", "groups": ["Data warehouses"], "language": "python", "name": "Amazon Redshift", "path": "sensors/redshift.py"}, "sensors/bigquery.py:sensor:python:Google BigQuery:Data warehouses": {"block_type": "sensor", "groups": ["Data warehouses"], "language": "python", "name": "Google BigQuery", "path": "sensors/bigquery.py"}, "sensors/snowflake.py:sensor:python:Snowflake:Data warehouses": {"block_type": "sensor", "groups": ["Data warehouses"], "language": "python", "name": "Snowflake", "path": "sensors/snowflake.py"}, "sensors/mysql.py:sensor:python:MySQL:Databases": {"block_type": "sensor", "groups": ["Databases"], "language": "python", "name": "MySQL", "path": "sensors/mysql.py"}, "sensors/postgres.py:sensor:python:PostgreSQL:Databases": {"block_type": "sensor", "groups": ["Databases"], "language": "python", "name": "PostgreSQL", "path": "sensors/postgres.py"}, "data_integrations/sources/base:data_loader:sources:Amazon S3:Data integration data loader block for Amazon S3 sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Amazon S3 sources.", "language": "sources", "name": "Amazon S3", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Amazon S3"}}, "data_integrations/sources/base:data_loader:sources:Amplitude:Data integration data loader block for Amplitude sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Amplitude sources.", "language": "sources", "name": "Amplitude", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Amplitude"}}, "data_integrations/sources/base:data_loader:sources:Api:Data integration data loader block for Api sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Api sources.", "language": "sources", "name": "Api", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Api"}}, "data_integrations/sources/base:data_loader:sources:Azure Blob Storage:Data integration data loader block for Azure Blob Storage sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Azure Blob Storage sources.", "language": "sources", "name": "Azure Blob Storage", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Azure Blob Storage"}}, "data_integrations/sources/base:data_loader:sources:BigQuery:Data integration data loader block for BigQuery sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for BigQuery sources.", "language": "sources", "name": "BigQuery", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "BigQuery"}}, "data_integrations/sources/base:data_loader:sources:Chargebee:Data integration data loader block for Chargebee sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Chargebee sources.", "language": "sources", "name": "Chargebee", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Chargebee"}}, "data_integrations/sources/base:data_loader:sources:Commercetools:Data integration data loader block for Commercetools sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Commercetools sources.", "language": "sources", "name": "Commercetools", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Commercetools"}}, "data_integrations/sources/base:data_loader:sources:Couchbase:Data integration data loader block for Couchbase sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Couchbase sources.", "language": "sources", "name": "Couchbase", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Couchbase"}}, "data_integrations/sources/base:data_loader:sources:Datadog:Data integration data loader block for Datadog sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Datadog sources.", "language": "sources", "name": "Datadog", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Datadog"}}, "data_integrations/sources/base:data_loader:sources:DynamoDB:Data integration data loader block for DynamoDB sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for DynamoDB sources.", "language": "sources", "name": "DynamoDB", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "DynamoDB"}}, "data_integrations/sources/base:data_loader:sources:Facebook Ads:Data integration data loader block for Facebook Ads sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Facebook Ads sources.", "language": "sources", "name": "Facebook Ads", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Facebook Ads"}}, "data_integrations/sources/base:data_loader:sources:Freshdesk:Data integration data loader block for Freshdesk sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Freshdesk sources.", "language": "sources", "name": "Freshdesk", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Freshdesk"}}, "data_integrations/sources/base:data_loader:sources:Front:Data integration data loader block for Front sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Front sources.", "language": "sources", "name": "Front", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Front"}}, "data_integrations/sources/base:data_loader:sources:GitHub:Data integration data loader block for GitHub sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for GitHub sources.", "language": "sources", "name": "GitHub", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "GitHub"}}, "data_integrations/sources/base:data_loader:sources:Google Ads:Data integration data loader block for Google Ads sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Google Ads sources.", "language": "sources", "name": "Google Ads", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Google Ads"}}, "data_integrations/sources/base:data_loader:sources:Google Analytics:Data integration data loader block for Google Analytics sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Google Analytics sources.", "language": "sources", "name": "Google Analytics", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Google Analytics"}}, "data_integrations/sources/base:data_loader:sources:Google Search Console:Data integration data loader block for Google Search Console sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Google Search Console sources.", "language": "sources", "name": "Google Search Console", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Google Search Console"}}, "data_integrations/sources/base:data_loader:sources:Google Sheets:Data integration data loader block for Google Sheets sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Google Sheets sources.", "language": "sources", "name": "Google Sheets", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Google Sheets"}}, "data_integrations/sources/base:data_loader:sources:HubSpot:Data integration data loader block for HubSpot sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for HubSpot sources.", "language": "sources", "name": "HubSpot", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "HubSpot"}}, "data_integrations/sources/base:data_loader:sources:Intercom:Data integration data loader block for Intercom sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Intercom sources.", "language": "sources", "name": "Intercom", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Intercom"}}, "data_integrations/sources/base:data_loader:sources:Knowi:Data integration data loader block for Knowi sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Knowi sources.", "language": "sources", "name": "Knowi", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Knowi"}}, "data_integrations/sources/base:data_loader:sources:LinkedIn Ads:Data integration data loader block for LinkedIn Ads sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for LinkedIn Ads sources.", "language": "sources", "name": "LinkedIn Ads", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "LinkedIn Ads"}}, "data_integrations/sources/base:data_loader:sources:Microsoft SQL Server:Data integration data loader block for Microsoft SQL Server sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Microsoft SQL Server sources.", "language": "sources", "name": "Microsoft SQL Server", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Microsoft SQL Server", "uuid": "mssql"}}, "data_integrations/sources/base:data_loader:sources:Mode:Data integration data loader block for Mode sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Mode sources.", "language": "sources", "name": "Mode", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Mode"}}, "data_integrations/sources/base:data_loader:sources:Monday:Data integration data loader block for Monday sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Monday sources.", "language": "sources", "name": "Monday", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Monday"}}, "data_integrations/sources/base:data_loader:sources:MongoDB:Data integration data loader block for MongoDB sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for MongoDB sources.", "language": "sources", "name": "MongoDB", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "MongoDB"}}, "data_integrations/sources/base:data_loader:sources:MySQL:Data integration data loader block for MySQL sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for MySQL sources.", "language": "sources", "name": "MySQL", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "MySQL"}}, "data_integrations/sources/base:data_loader:sources:OracleDB:Data integration data loader block for OracleDB sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for OracleDB sources.", "language": "sources", "name": "OracleDB", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "OracleDB"}}, "data_integrations/sources/base:data_loader:sources:Outreach:Data integration data loader block for Outreach sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Outreach sources.", "language": "sources", "name": "Outreach", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Outreach"}}, "data_integrations/sources/base:data_loader:sources:Paystack:Data integration data loader block for Paystack sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Paystack sources.", "language": "sources", "name": "Paystack", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Paystack"}}, "data_integrations/sources/base:data_loader:sources:Pipedrive:Data integration data loader block for Pipedrive sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Pipedrive sources.", "language": "sources", "name": "Pipedrive", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Pipedrive"}}, "data_integrations/sources/base:data_loader:sources:PostgreSQL:Data integration data loader block for PostgreSQL sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for PostgreSQL sources.", "language": "sources", "name": "PostgreSQL", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "PostgreSQL"}}, "data_integrations/sources/base:data_loader:sources:Postmark:Data integration data loader block for Postmark sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Postmark sources.", "language": "sources", "name": "Postmark", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Postmark"}}, "data_integrations/sources/base:data_loader:sources:PowerBI:Data integration data loader block for PowerBI sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for PowerBI sources.", "language": "sources", "name": "PowerBI", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "PowerBI"}}, "data_integrations/sources/base:data_loader:sources:Redshift:Data integration data loader block for Redshift sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Redshift sources.", "language": "sources", "name": "Redshift", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Redshift"}}, "data_integrations/sources/base:data_loader:sources:Salesforce:Data integration data loader block for Salesforce sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Salesforce sources.", "language": "sources", "name": "Salesforce", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Salesforce"}}, "data_integrations/sources/base:data_loader:sources:Sftp:Data integration data loader block for Sftp sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Sftp sources.", "language": "sources", "name": "Sftp", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Sftp"}}, "data_integrations/sources/base:data_loader:sources:Snowflake:Data integration data loader block for Snowflake sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Snowflake sources.", "language": "sources", "name": "Snowflake", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Snowflake"}}, "data_integrations/sources/base:data_loader:sources:Stripe:Data integration data loader block for Stripe sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Stripe sources.", "language": "sources", "name": "Stripe", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Stripe"}}, "data_integrations/sources/base:data_loader:sources:Tableau:Data integration data loader block for Tableau sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Tableau sources.", "language": "sources", "name": "Tableau", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Tableau"}}, "data_integrations/sources/base:data_loader:sources:Twitter Ads:Data integration data loader block for Twitter Ads sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Twitter Ads sources.", "language": "sources", "name": "Twitter Ads", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Twitter Ads"}}, "data_integrations/sources/base:data_loader:sources:Zendesk:Data integration data loader block for Zendesk sources.": {"block_type": "data_loader", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data loader block for Zendesk sources.", "language": "sources", "name": "Zendesk", "path": "data_integrations/sources/base", "template_type": "data_integration", "template_variables": {"name": "Zendesk"}}, "data_integrations/destinations/base:data_exporter:destinations:Amazon S3:Data integration data exporter block for Amazon S3 destinations.": {"block_type": "data_exporter", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data exporter block for Amazon S3 destinations.", "language": "destinations", "name": "Amazon S3", "path": "data_integrations/destinations/base", "template_type": "data_integration", "template_variables": {"name": "Amazon S3"}}, "data_integrations/destinations/base:data_exporter:destinations:BigQuery:Data integration data exporter block for BigQuery destinations.": {"block_type": "data_exporter", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data exporter block for BigQuery destinations.", "language": "destinations", "name": "BigQuery", "path": "data_integrations/destinations/base", "template_type": "data_integration", "template_variables": {"name": "BigQuery"}}, "data_integrations/destinations/base:data_exporter:destinations:Clickhouse:Data integration data exporter block for Clickhouse destinations.": {"block_type": "data_exporter", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data exporter block for Clickhouse destinations.", "language": "destinations", "name": "Clickhouse", "path": "data_integrations/destinations/base", "template_type": "data_integration", "template_variables": {"name": "Clickhouse"}}, "data_integrations/destinations/base:data_exporter:destinations:Delta Lake S3:Data integration data exporter block for Delta Lake S3 destinations.": {"block_type": "data_exporter", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data exporter block for Delta Lake S3 destinations.", "language": "destinations", "name": "Delta Lake S3", "path": "data_integrations/destinations/base", "template_type": "data_integration", "template_variables": {"name": "Delta Lake S3"}}, "data_integrations/destinations/base:data_exporter:destinations:Elasticsearch:Data integration data exporter block for Elasticsearch destinations.": {"block_type": "data_exporter", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data exporter block for Elasticsearch destinations.", "language": "destinations", "name": "Elasticsearch", "path": "data_integrations/destinations/base", "template_type": "data_integration", "template_variables": {"name": "Elasticsearch"}}, "data_integrations/destinations/base:data_exporter:destinations:Google Cloud Storage:Data integration data exporter block for Google Cloud Storage destinations.": {"block_type": "data_exporter", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data exporter block for Google Cloud Storage destinations.", "language": "destinations", "name": "Google Cloud Storage", "path": "data_integrations/destinations/base", "template_type": "data_integration", "template_variables": {"name": "Google Cloud Storage"}}, "data_integrations/destinations/base:data_exporter:destinations:MongoDB:Data integration data exporter block for MongoDB destinations.": {"block_type": "data_exporter", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data exporter block for MongoDB destinations.", "language": "destinations", "name": "MongoDB", "path": "data_integrations/destinations/base", "template_type": "data_integration", "template_variables": {"name": "MongoDB"}}, "data_integrations/destinations/base:data_exporter:destinations:Microsoft SQL Server:Data integration data exporter block for Microsoft SQL Server destinations (MSSQL).": {"block_type": "data_exporter", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data exporter block for Microsoft SQL Server destinations (MSSQL).", "language": "destinations", "name": "Microsoft SQL Server", "path": "data_integrations/destinations/base", "template_type": "data_integration", "template_variables": {"module_name": "MSSQL", "name": "Microsoft SQL Server", "uuid": "mssql"}}, "data_integrations/destinations/base:data_exporter:destinations:MySQL:Data integration data exporter block for MySQL destinations.": {"block_type": "data_exporter", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data exporter block for MySQL destinations.", "language": "destinations", "name": "MySQL", "path": "data_integrations/destinations/base", "template_type": "data_integration", "template_variables": {"name": "MySQL"}}, "data_integrations/destinations/base:data_exporter:destinations:Opensearch:Data integration data exporter block for Opensearch destinations.": {"block_type": "data_exporter", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data exporter block for Opensearch destinations.", "language": "destinations", "name": "Opensearch", "path": "data_integrations/destinations/base", "template_type": "data_integration", "template_variables": {"name": "Opensearch"}}, "data_integrations/destinations/base:data_exporter:destinations:OracleDB:Data integration data exporter block for OracleDB destinations.": {"block_type": "data_exporter", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data exporter block for OracleDB destinations.", "language": "destinations", "name": "OracleDB", "path": "data_integrations/destinations/base", "template_type": "data_integration", "template_variables": {"name": "OracleDB"}}, "data_integrations/destinations/base:data_exporter:destinations:PostgreSQL:Data integration data exporter block for PostgreSQL destinations.": {"block_type": "data_exporter", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data exporter block for PostgreSQL destinations.", "language": "destinations", "name": "PostgreSQL", "path": "data_integrations/destinations/base", "template_type": "data_integration", "template_variables": {"name": "PostgreSQL"}}, "data_integrations/destinations/base:data_exporter:destinations:Redshift:Data integration data exporter block for Redshift destinations.": {"block_type": "data_exporter", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data exporter block for Redshift destinations.", "language": "destinations", "name": "Redshift", "path": "data_integrations/destinations/base", "template_type": "data_integration", "template_variables": {"name": "Redshift"}}, "data_integrations/destinations/base:data_exporter:destinations:Salesforce:Data integration data exporter block for Salesforce destinations.": {"block_type": "data_exporter", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data exporter block for Salesforce destinations.", "language": "destinations", "name": "Salesforce", "path": "data_integrations/destinations/base", "template_type": "data_integration", "template_variables": {"name": "Salesforce"}}, "data_integrations/destinations/base:data_exporter:destinations:Snowflake:Data integration data exporter block for Snowflake destinations.": {"block_type": "data_exporter", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data exporter block for Snowflake destinations.", "language": "destinations", "name": "Snowflake", "path": "data_integrations/destinations/base", "template_type": "data_integration", "template_variables": {"name": "Snowflake"}}, "data_integrations/destinations/base:data_exporter:destinations:Trino:Data integration data exporter block for Trino destinations.": {"block_type": "data_exporter", "configuration": {"data_integration": {}}, "defaults": {"language": "yaml"}, "description": "Data integration data exporter block for Trino destinations.", "language": "destinations", "name": "Trino", "path": "data_integrations/destinations/base", "template_type": "data_integration", "template_variables": {"name": "Trino"}}}}